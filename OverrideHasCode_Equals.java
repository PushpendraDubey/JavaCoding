import java.util.*;
class Car {
    private String colour;
    private String brand;

    public void setColour(String colour){ this.colour = colour;  };
    public String getColour(){ return colour; };
    public void setBrand(String brand){ this.brand = brand; };
    public String getBrand(){ return brand; };

    @Override
    public boolean equals(Object o){
        if(this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Car car = (Car) o;
        return Objects.equals(colour,car.colour) && Objects.equals(brand,car.brand);
    }
    @Override
    public int hashCode(){
        return Objects.hash(colour,brand);
    }
}
/*
equals Method
The equals method is used to compare two objects for equality. 
By default, the equals method in the Object class compares the memory addresses of the objects, 
which means two different instances of the Car class will not be considered equal even if they have the same properties.

hashCode Method
The hashCode method returns an integer value, generated by a hashing algorithm. 
This value is used by hash-based collections like HashMap to efficiently locate a key. 
If two objects are considered equal according to the equals method, they must also have the same hash code.

 * When using objects as keys in a HashMap, it's important to override both hashCode and equals
 *  to ensure that the HashMap can correctly identify and retrieve the objects. 
 * If these methods are not overridden, the HashMap may not function as expected, 
 * leading to issues like duplicate keys or inability to find keys.
 */

public class hashMap_obj {

    public static void main(String []args){
        Car c1 = new Car();
        Car c2 = new Car();
        Car c3 = new Car();

        c1.setColour("Red");
        c1.setBrand("Mahindra");

        c2.setColour("Red");
        c2.setBrand("Mahindra");

        c3.setColour("Green");
        c3.setBrand("BMW");

        // System.out.println(c1.getColour() + " "+ c1.getBrand());

        HashMap<Car,String> hm = new HashMap<>();
        hm.put(c1,c1.getBrand());
        hm.put(c2,c2.getBrand());
        hm.put(c3,c3.getBrand());

        for(Car c : hm.keySet()){
            System.out.println(hm.get(c));
        }

    }
}

